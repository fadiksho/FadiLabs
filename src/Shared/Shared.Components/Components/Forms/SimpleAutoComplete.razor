@using System.Linq.Expressions
@typeparam TItem

@code {
	[Parameter]
	public List<TItem> Items { get; set; } = [];

	[Parameter]
	public EventCallback<TItem> OnItemClick { get; set; }

	[Parameter, EditorRequired]
	public required Expression<Func<TItem, string>> For { get; set; }

	private async Task TriggerItemClickEvent(TItem item)
	{
		await OnItemClick.InvokeAsync(item);
	}

	protected override void OnParametersSet()
	{
		base.OnParametersSet();
	}
}

<div class="relative">
	@if (Items.Count > 0)
	{
		<ul class="menu bg-base-200 absolute w-full shadow">
			@foreach (var item in Items)
			{
				<li @key="item">
					<button class="btn btn-sm justify-start btn-block"
									type="button" @onclick="@(e => TriggerItemClickEvent(item))">
						@For.Compile()(item)
					</button>
				</li>
			}
		</ul>
	}
</div>