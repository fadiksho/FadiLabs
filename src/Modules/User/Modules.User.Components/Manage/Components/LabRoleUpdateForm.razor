@code {
	[Parameter]
	public EventCallback<UpdateLabRole> OnLabRoleUpdated { get; set; }

	[Parameter]
	public EventCallback<Guid> OnRoleDeleted { get; set; }

	[Parameter]
	public required GetLabRolesResponse Role { get; set; }

	[Inject]
	public IServiceExecutor<IUIBus> ServiceExecutor { get; set; } = default!;


	private EditContext? editContext;
	private UpdateLabRole editRoleRequest = new();
	private Result editRoleResult;

	protected override void OnInitialized()
	{
		editRoleRequest = new UpdateLabRole
		{
			Id = Role.Id,
			Name = Role.Name,
			Description = Role.Description,
			AutoAssign = Role.AutoAssign
		};

		editContext = new(editRoleRequest);
	}

	private async Task editRoleHandler()
	{
		editRoleResult = await ServiceExecutor.ExecuteAsync(nameof(UpdateLabRole), x =>
		{
			return x.Send(editRoleRequest);
		});

		if (editRoleResult.IsSuccess)
		{
			await OnLabRoleUpdated.InvokeAsync(editRoleRequest);
		}
	}

	private async Task deleteRoleHandler()
	{
	  var deleteRoleResult = await ServiceExecutor.ExecuteAsync(nameof(DeleteLabRole), x =>
		{
			return x.Send(new DeleteLabRole(Role.Id));
		});

		if(deleteRoleResult.IsSuccess)
		{
			await OnRoleDeleted.InvokeAsync(Role.Id);
		}
	}
}

<Papper>
	<LoadingTitle Title="@($"Edit role")"
								IsLoading="@(ServiceExecutor.IsRequestLoading(nameof(UpdateLabRole)))" />

	@if (editRoleResult.IsFailed)
	{
		<ResultError Error="@editRoleResult.Error" />
	}

	<EditForm EditContext="editContext"
						class="flex flex-col gap-2">
		<FluentValidationValidator ValidatorType=typeof(UpdateLabRoleValidator) />

		<label class="form-control w-full">
			<div class="label">
				<span class="label-text">Name</span>
			</div>

			<InputTextOnInput @bind-Value="editRoleRequest.Name"
												placeholder="Type here"
												class="input input-bordered" />

			<ValidationMessage For="() => editRoleRequest.Name" class="text-red-500 text-sm italic" />
		</label>

		<label class="form-control w-full">
			<div class="label">
				<span class="label-text">Description</span>
			</div>
			<InputTextOnInput @bind-Value="editRoleRequest.Description"
												placeholder="Type here"
												class="input input-bordered" />

			<ValidationMessage For="() => editRoleRequest.Description" class="text-red-500 text-sm italic" />
		</label>

		<label class="form-control w-full cursor-pointer">
			<span class="label justify-start gap-4">
				<span class="label-text">Auto Assign</span>
				<InputCheckbox @bind-Value="editRoleRequest.AutoAssign" class="checkbox" />
			</span>
			<ValidationMessage For="() => editRoleRequest.AutoAssign" class="text-red-500 text-sm italic" />
		</label>

		<div class="flex gap-2 items-center justify-between">
			<SubmitButton OnValidSubmit="editRoleHandler"
										class="btn btn-primary"
										disabled="@(ServiceExecutor.IsRequestLoading(nameof(UpdateLabRole)))">
				Save
				@if (ServiceExecutor.IsRequestLoading(nameof(UpdateLabRole)))
				{
					<span class="ml-2 loading loading-spinner loading-md"></span>
				}
			</SubmitButton>

			<button type="button" @onclick="deleteRoleHandler"
							class="btn btn-error"
							disabled="@(ServiceExecutor.IsRequestLoading(nameof(DeleteLabRole)))">
				Delete
			</button>
		</div>
	</EditForm>
</Papper>