@page "/admin-lab/permissions"
@rendermode InteractiveServer
@attribute [StreamRendering]

@code
{
	[Inject]
	public IServiceExecutor<IUIBus> ServiceExecutor { get; set; } = default!;

	private Result<GetPermissionsResponse> getPermissionsResult;
	private GetPermissions getPermissionRequest = new();
	private Result setPermissionsResult;

	private Result syncPermissionResult;

	private bool _setPermissionsButtonEnabled;
	public bool SetPermissionsButtonEnabled
	{
		get
		{
			return _setPermissionsButtonEnabled
				&& !ServiceExecutor.IsRequestLoading(nameof(SetPermission));
		}
	}

	private EditContext? editContext;

	private PermissionRequest permissionRequest = new();

	protected override async Task OnInitializedAsync()
	{
		editContext = new(permissionRequest);

		getPermissionsResult = await ServiceExecutor.ExecuteAsync(nameof(GetPermissions), x =>
		{
			return x.Send(getPermissionRequest);
		}, true);
	}

	private void AddPermission()
	{
		if (editContext?.Validate() == false)
			return;

		var addedPermission = new PermissionResponse
			{
				Value = permissionRequest.Value,
				Description = permissionRequest.Description
			};

		getPermissionsResult.Entity.Permission.Add(addedPermission);

		permissionRequest.ResetToDefault();
		_setPermissionsButtonEnabled = true;
	}

	private void DeletePermisionHandler(PermissionResponse permission)
	{
		getPermissionsResult.Entity.Permission.Remove(permission);
		_setPermissionsButtonEnabled = true;
	}

	private async Task SavePermissionsHandler()
	{
		var setPermissionRequest = new SetPermission
			{
				Permissions = getPermissionsResult.Entity.Permission.Select(x => new PermissionRequest
				{
					Description = x.Description,
					Value = x.Value
				}).ToList()
			};

		setPermissionsResult = new();
		setPermissionsResult = await ServiceExecutor.ExecuteAsync(nameof(SetPermission), 
			x => x.Send(setPermissionRequest));

		if (setPermissionsResult.IsSuccess)
		{
			_setPermissionsButtonEnabled = false;
		}
	}

	private async Task SyncPermissionsHandler()
	{
		syncPermissionResult = await ServiceExecutor.ExecuteAsync(nameof(SyncPermissions), x =>
		{
			return x.Send(new SyncPermissions());
		});

		if (syncPermissionResult.IsSuccess)
		{
			getPermissionsResult = await ServiceExecutor.ExecuteAsync(nameof(GetPermissions), x =>
			{
				return x.Send(getPermissionRequest);
			});
		}
	}
}

<Papper>
	<LoadingTitle Title="@($"Resource: {getPermissionsResult.Entity?.Name}")"
								IsLoading="@(ServiceExecutor.IsLoading)" />

	@if (getPermissionsResult.IsFailed)
	{
		<ResultError Error="@getPermissionsResult.Error" />
	}

	@if (getPermissionsResult.IsSuccess)
	{
		<div class="overflow-x-auto scroller">
			<table class="table">
				<thead>
					<tr>
						<th>Value</th>
						<th>Description</th>
						<th class="p-0">
							<div class="flex gap-1 justify-end">
								<button class="btn btn-success"
												@onclick="SavePermissionsHandler"
												disabled="@(!SetPermissionsButtonEnabled)">
									Save
								</button>
							</div>
						</th>
					</tr>
				</thead>
				<tbody>
					@foreach (var permission in getPermissionsResult.Entity.Permission)
					{
						<tr>
							<td>@permission.Value</td>
							<td>@permission.Description</td>
							<td class="p-0">
								<div class="flex justify-end">
									<button class="btn btn-error btn-sm"
													@onclick="@(() => DeletePermisionHandler(permission))">
										Delete
									</button>
								</div>
							</td>
						</tr>
					}
					@if (getPermissionsResult.Entity.Permission.Count == 0)
					{
						<tr>
							<td colspan="3">
								Empty permission.
							</td>
						</tr>
					}

					<tr>
						<td colspan="3" class="p-0">
							<Papper>
								<LoadingTitle Title="Create new permission" />

								<EditForm EditContext="editContext"
													class="flex flex-col gap-2">
									<FluentValidationValidator ValidatorType=typeof(PermissionRequestValidator) />

									<div class="flex flex-wrap gap-2">
										<div class="flex-1">
											<InputTextOnInput @bind-Value="permissionRequest.Value"
																				placeholder="Value" class="input input-sm input-bordered w-full" />
											<ValidationMessage For="() => permissionRequest.Value" class="text-red-500 text-sm italic" />
										</div>

										<div class="flex-1">
											<InputTextOnInput @bind-Value="permissionRequest.Description"
																				placeholder="Description"
																				class="input input-sm input-bordered w-full" />
											<ValidationMessage For="() => permissionRequest.Description" class="text-red-500 text-sm italic" />
										</div>
									</div>
									<div class="flex gap-2 items-center">
										<SubmitButton OnValidSubmit="AddPermission"
																	class="btn btn-sm btn-primary">
											Add
										</SubmitButton>
									</div>
								</EditForm>
							</Papper>
						</td>
					</tr>
				</tbody>
			</table>
		</div>
	}

</Papper>


<Papper>
	<LoadingTitle Title="Sync permissions"
								IsLoading="ServiceExecutor.IsRequestLoading(nameof(SyncPermissions))" />

	@if (syncPermissionResult.IsFailed)
	{
		<ResultError Error="@syncPermissionResult.Error" />
	}

	<div class="flex">
		<button class="btn btn-neutral"
						@onclick="SyncPermissionsHandler"
						disabled="@(ServiceExecutor.IsLoading)">
			Sync Permission
		</button>
	</div>
</Papper>

