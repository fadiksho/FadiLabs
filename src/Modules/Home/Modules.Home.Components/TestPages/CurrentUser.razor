@page "/current-user"
@using Modules.Shared.Integration.Models
@using Modules.User.Integration.User.Queries
@using System.IdentityModel.Tokens.Jwt;
@using System.Text.Json

@attribute [LabAuthorize]

@code {
	[Inject]
	public required IServiceExecutor<IUIBus> ServiceExecutor { get; set; }

	private Result<PagedList<GetLabRolesResponse>> getLabRolesResult;

	protected override async Task OnInitializedAsync()
	{
		getLabRolesResult = await ServiceExecutor
				.ExecuteAsync(nameof(GetLabRoles), x => x.Send(new GetLabRoles()));
	}

	private string DecodeToken(string? token)
	{
		if (string.IsNullOrEmpty(token))
			return "Empty token.";

		var handler = new JwtSecurityTokenHandler();
		var jsonToken = handler.ReadToken(token) as JwtSecurityToken;
		if (jsonToken == null)
			return "Invalid token.";

		var header = jsonToken.Header.ToDictionary(h => h.Key, h => h.Value);
		var payload = jsonToken.Claims
			.GroupBy(c => c.Type)
			.ToDictionary(g => g.Key, g => g.Select(c => c.Value)
			.ToList());

		if (payload.ContainsKey("iat"))
		{
			payload["iat"] = payload["iat"].Select(iat => DateTimeOffset.FromUnixTimeSeconds(long.Parse(iat)).ToString("dd/MM/yyyy H:mm:ss")).ToList();
		}
		if (payload.ContainsKey("exp"))
		{
			payload["exp"] = payload["exp"].Select(exp => DateTimeOffset.FromUnixTimeSeconds(long.Parse(exp)).ToString("dd/MM/yyyy H:mm:ss")).ToList();
		}
		if (payload.ContainsKey("iat") && payload.ContainsKey("exp"))
		{
			var issuedAt = DateTimeOffset.FromUnixTimeSeconds(long.Parse(jsonToken.Claims.First(c => c.Type == "iat").Value));
			var expiresAt = DateTimeOffset.FromUnixTimeSeconds(long.Parse(jsonToken.Claims.First(c => c.Type == "exp").Value));
			var tokenLifetime = expiresAt - issuedAt;
			payload["tokenLifetime"] = new List<string>
			{
				tokenLifetime.ToString()
			};
		}

		var orderedPayload = new Dictionary<string, List<string>>();
		
		if (payload.ContainsKey("sub")) orderedPayload["sub"] = payload["sub"];
		if (payload.ContainsKey("aud")) orderedPayload["aud"] = payload["aud"];
		if (payload.ContainsKey("iat")) orderedPayload["iat"] = payload["iat"];
		if (payload.ContainsKey("exp")) orderedPayload["exp"] = payload["exp"];
		if (payload.ContainsKey("tokenLifetime")) orderedPayload["tokenLifetime"] = payload["tokenLifetime"];
		if (payload.ContainsKey("role")) orderedPayload["role"] = payload["role"];
		if (payload.ContainsKey("labs-permissions")) orderedPayload["labs-permissions"] = payload["labs-permissions"];
		
		foreach (var item in payload)
		{ 
			if (!orderedPayload.ContainsKey(item.Key)) 
			{ 
				orderedPayload[item.Key] = item.Value; 
			} 
		}

		string headerJson = JsonSerializer.Serialize(header, new JsonSerializerOptions { WriteIndented = true });
		string payloadJson = JsonSerializer.Serialize(orderedPayload, new JsonSerializerOptions { WriteIndented = true });
		// var formated = "Header:";
		// formated += headerJson;
		var formated = "Payload:";
		formated += payloadJson;

		return formated;
	}
}

<Papper>
	<RenderingContextMessage />
	<LoadingTitle Title="User Principal" />
	<AuthorizeView>
		<Authorized>
			<!-- User Identities -->
			@{
				int index = 0;
				foreach (var identity in context.User.Identities)
				{
					index++;

					<div class="divider divider-start divider-primary">@index</div>
					if (identity != null)
					{
						<div class="collapse bg-base-200">
							<input type="checkbox" />
							<div class="collapse-title text-xl font-medium">
								@identity.AuthenticationType
							</div>
							<div class="collapse-content overflow-x-auto">
								<table class="table">
									<!-- head -->
									<tbody>
										<!-- rows -->
										<tr>
											<td>@nameof(identity.IsAuthenticated)</td>
											<td>
												<span class="text-success">@identity?.IsAuthenticated</span>
											</td>
										</tr>
										<tr>
											<td>@nameof(identity.AuthenticationType)</td>
											<td>@identity?.AuthenticationType</td>
										</tr>
										<tr>
											<td>@nameof(identity.NameClaimType)</td>
											<td>@(identity?.Name ?? "Name claim not found!")</td>
										</tr>
										<tr>
											<td>@nameof(identity.RoleClaimType)</td>
											<td>@(identity?.Claims.FirstOrDefault(x => x.Type == identity.RoleClaimType)?.Value ?? "Role claim not found!")</td>
										</tr>
									</tbody>
								</table>
							</div>
						</div>

						<div class="collapse bg-base-200">
							<input type="checkbox" />
							<div class="collapse-title text-xl font-medium">
								@identity?.AuthenticationType Claims
							</div>
							<div class="collapse-content overflow-x-auto">
								<table class="table">
									<thead>
										<tr>
											<th>Claim Type</th>
											<th>Claim Value</th>
										</tr>
									</thead>
									<tbody>
										@foreach (var claim in identity?.Claims ?? [])
										{
											<tr>
												<td>@claim.Type</td>

												@if (claim.Type == "iat" || claim.Type == "exp")
												{
													<td>
														@{
															var _dateTime = DateTimeOffset.FromUnixTimeSeconds(long.Parse(claim.Value));
														}
														<span class="mr-2">@_dateTime.ToLocalTime()</span>
														@if (_dateTime - DateTimeOffset.Now > TimeSpan.Zero)
														{
															<span class="text-success">Valid (@((_dateTime - DateTimeOffset.Now).ToString(@"hh\:mm\:ss")))</span>
														}
														else
														{
															<span class="text-error">Expired</span>
														}
													</td>
												}
												else
												{
													<td>@claim.Value</td>
												}

											</tr>
										}
									</tbody>
								</table>
							</div>
						</div>
					}
				}
			}
		</Authorized>
		<NotAuthorized>
			<!-- Authentication Status -->
			<div class="flex gap-2 align-middle">
				<div>
					Authentication Status:
					<span class="text-error">Not Authenticated</span>
				</div>
			</div>
		</NotAuthorized>
	</AuthorizeView>
</Papper>

<Papper>
	<LoadingTitle Title="Lab Authorize View Checks" />

	<LabAuthorizeView>
		<Authorized>
			<text>Permissions: </text>
			<div class="flex flex-wrap gap-1">
				<span class="badge badge-neutral">@context.User.GetPermissions()</span>
			</div>
		</Authorized>
	</LabAuthorizeView>

	@if (getLabRolesResult.IsSuccess)
	{
		<text>Roles: </text>
		<div class="flex flex-wrap gap-1">
			@foreach (var labRole in getLabRolesResult.Entity.Items)
			{
				<AuthorizeView Roles="@labRole.Name">
					<Authorized>
						<span class="badge badge-success">@labRole.Name</span>
					</Authorized>

					<NotAuthorized>
						<span class="badge badge-error">@labRole.Name</span>
					</NotAuthorized>
				</AuthorizeView>
			}
		</div>
	}
</Papper>
