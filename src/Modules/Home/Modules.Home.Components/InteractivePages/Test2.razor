@page "/test2"
@using Modules.User.Integration.User.Commands

@attribute [LabAuthorize]

@inject IServiceExecutor<IUIBus> ServiceExecutor

<PageTitle>Test 2</PageTitle>

<MudStack Spacing="4">

	<RenderingContextMessage />

	<AuthorizeView>
		<Authorized>
			<div class="d-flex flex-column gap-1">
				<span>Authorized</span>
				<span>@($"Expire in: {context.User.GetIdTokenExpiration() - DateTimeOffset.Now}")</span>
			</div>
		</Authorized>
		<NotAuthorized>
			<span class="text-error text-xl font-bold">NotAuthorized</span>
		</NotAuthorized>
	</AuthorizeView>

	<MudPaper Class="pa-4 d-flex flex-column gap-2">
		<MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="GetQueryTestClickHandler">
			Send
			@if (ServiceExecutor.IsRequestLoading(nameof(GetTestQuery)))
			{
				<MudProgressCircular Color="Color.Primary" Size="Size.Small" Indeterminate="true" />
			}
		</MudButton>
		<pre>
		<code>
				@if (getTestQueryResult.IsSuccess)
				{
					@getTestQueryResult.SuccessMessage
				}
				else if (getTestQueryResult.IsFailed)
				{
					@getTestQueryResult.Error.Message
				}
			</code>
		</pre>
	</MudPaper>

	<MudPaper Class="pa-4 d-flex flex-column gap-2">

		<MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="GetTestAuthorizedQueryClickHandler">
			Send
			@if (ServiceExecutor.IsRequestLoading(nameof(GetTestQuery)))
			{
				<MudProgressCircular Color="Color.Primary" Size="Size.Small" Indeterminate="true" />
			}
		</MudButton>
		<pre>
		<code>
				@if (getTestAuthorizeQueryResult.IsSuccess)
				{
					@getTestAuthorizeQueryResult.SuccessMessage
				}
				else if (getTestAuthorizeQueryResult.IsFailed)
				{
					@getTestAuthorizeQueryResult.Error.Message
				}
			</code>
		</pre>
	</MudPaper>

</MudStack>

@code {
	private Result getTestQueryResult;

	private Result getTestAuthorizeQueryResult;

	async Task GetQueryTestClickHandler()
	{
		getTestQueryResult =
			await ServiceExecutor.ExecuteAsync(nameof(GetTestQuery), x => x.Send(new GetTestQuery()));
	}

	async Task GetTestAuthorizedQueryClickHandler()
	{
		getTestAuthorizeQueryResult =
			await ServiceExecutor.ExecuteAsync(nameof(GetTestAuthorizedQuery), x => x.Send(new GetTestAuthorizedQuery()));
	}
}