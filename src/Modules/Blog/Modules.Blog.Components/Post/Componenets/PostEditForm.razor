@code {
	[Inject]
	public IServiceExecutor<IUIBus> ServiceExecutor { get; set; } = default!;

	[Parameter]
	public required UpdatePost UpdatePost { get; set; }

	private Result<UpdatePostResponse> updatePostResult;
	private EditContext? editContext;

	protected override void OnInitialized()
	{
		editContext = new(UpdatePost);
	}

	protected override void OnParametersSet()
	{
		base.OnParametersSet();
	}

	private void HandleTagsChanged(List<TagResponse> tags)
	{
		UpdatePost.Tags = tags;
	}

	private async Task HandleValidSubmit()
	{
		updatePostResult = await ServiceExecutor
			.ExecuteAsync(nameof(UpdatePostResponse), x => x.Send(UpdatePost));
	}
}

<Papper>
	<EditForm EditContext="editContext">
		<div class="flex flex-col gap-2">
			<FluentValidationValidator ValidatorType=typeof(UpdatePostValidator) />

			<label class="form-control w-full">
				<div class="label">
					<span class="label-text">Title</span>
				</div>
				<InputText @bind-Value="UpdatePost.Title"
									 placeholder="Type here"
									 class="input input-bordered" />
				<ValidationMessage For="() => UpdatePost.Title" class="text-red-500 text-sm italic" />
			</label>

			<label class="form-control w-full">
				<div class="label">
					<span class="label-text">Slug</span>
				</div>
				<InputText @bind-Value="UpdatePost.Slug"
									 placeholder="Type here"
									 class="input input-bordered" />
				<ValidationMessage For="() => UpdatePost.Slug" class="text-red-500 text-sm italic" />

			</label>

			<label class="form-control w-full">
				<div class="label">
					<span class="label-text">Description</span>
				</div>
				<InputTextArea @bind-Value="UpdatePost.Description"
											 placeholder="Type here"
											 class="textarea textarea-bordered min-h-24" />
				<ValidationMessage For="() => UpdatePost.Description" class="text-red-500 text-sm italic" />

			</label>

			<label class="form-control w-full">
				<div class="label">
					<span class="label-text">Body</span>
				</div>
				<InputTextArea @bind-Value="UpdatePost.Body"
											 placeholder="Type here"
											 class="textarea textarea-bordered min-h-72" />
				<ValidationMessage For="() => UpdatePost.Body" class="text-red-500 text-sm italic" />
			</label>

			<PostTagsInput Tags="UpdatePost.Tags" OnTagsChanged="HandleTagsChanged" />

			<label class="form-control w-full">
				<div class="label">
					<span class="label-text">PublishedDate</span>
				</div>
				<InputDate @bind-Value="UpdatePost.PublishedDate"
									 Type="InputDateType.DateTimeLocal"
									 placeholder="Type here"
									 class="input input-bordered" />
				<ValidationMessage For="() => UpdatePost.PublishedDate" class="text-red-500 text-sm italic" />
			</label>

			<label class="form-control w-full">
				<div class="label">
					<span class="label-text">UpdatedDate</span>
				</div>
				<InputDate @bind-Value="UpdatePost.UpdatedDate"
									 Type="InputDateType.DateTimeLocal"
									 placeholder="Type here"
									 class="input input-bordered" />
				<ValidationMessage For="() => UpdatePost.UpdatedDate" class="text-red-500 text-sm italic" />
			</label>

			<label class="form-control w-full cursor-pointer">
				<span class="label justify-start gap-4">
					<span class="label-text">Publish</span>
					<InputCheckbox @bind-Value="UpdatePost.IsPublished" class="checkbox" />
				</span>
				<ValidationMessage For="() => UpdatePost.IsPublished" class="text-red-500 text-sm italic" />
			</label>

			@if (updatePostResult.IsFailed)
			{
				<ResultError Error="updatePostResult.Error" />
			}

			<div class="flex gap-2 items-center">
				<SubmitButton OnValidSubmit="HandleValidSubmit"
											class="btn btn-primary"
											disabled="@(ServiceExecutor.IsRequestLoading(nameof(UpdatePostResponse)))">
					Save
					@if (ServiceExecutor.IsRequestLoading(nameof(UpdatePostResponse)))
					{
						<span class="ml-2 loading loading-spinner loading-md"></span>
					}
				</SubmitButton>
			</div>
		</div>
	</EditForm>
</Papper>
