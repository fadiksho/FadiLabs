@code {
	[Inject]
	public IServiceExecutor<IUIBus> ServiceExecutor { get; set; } = default!;

	private Result<CreatePostResponse> createPostResult;
	private EditContext? editContext;
	private CreatePost createPostRequest = new();

	protected override void OnInitialized()
	{
		editContext = new(createPostRequest);
	}

	private async Task HandleValidSubmit()
	{
		createPostResult = new();
		createPostResult = await ServiceExecutor
			.ExecuteAsync(nameof(CreatePost), x => x.Send(createPostRequest));

		if (createPostResult.IsSuccess)
		{
			createPostRequest.ResetToDefault();
		}
	}

	private void HandleTagsChanged(List<TagResponse> tags)
	{
		createPostRequest.Tags = tags;
	}
}

<div class="flex flex-col gap-2">
	@if (createPostResult.IsSuccess)
	{
		<AlertMessage MessageText="@createPostResult.Entity.Title"
									Type="AlertMessageType.Success">
			<Footer>
				<a class="btn btn-success btn-sm" href="/blog/edit/@createPostResult.Entity.PostId">Go to Edit</a>
				<button class="btn btn-success btn-sm">Close</button>
			</Footer>
		</AlertMessage>
	}

	<Papper CssClass="relative">

		<LoadingTitle Title="Create new post" IsLoading="ServiceExecutor.IsLoading" ShowOverlay="true" />

		<EditForm EditContext="editContext" class="flex flex-col gap-2">
			<FluentValidationValidator ValidatorType=typeof(CreatePostValidator) />

			<label class="form-control w-full">
				<div class="label">
					<span class="label-text">Title</span>
				</div>

				<InputTextOnInput @bind-Value="createPostRequest.Title"
													placeholder="Type here"
													class="input input-bordered" />

				<ValidationMessage For="() => createPostRequest.Title" class="text-red-500 text-sm italic" />
			</label>

			<label class="form-control w-full">
				<div class="label">
					<span class="label-text">Description</span>
				</div>
				<InputTextArea @bind-Value="createPostRequest.Description"
											 placeholder="Type here"
											 class="textarea textarea-bordered min-h-24" />
				<ValidationMessage For="() => createPostRequest.Description" class="text-red-500 text-sm italic" />

			</label>

			<PostTagsInput OnTagsChanged="HandleTagsChanged" />

			@if (createPostResult.IsFailed)
			{
				<AlertMessage MessageText="@createPostResult.Error.Message"
											Type="AlertMessageType.Error" />
			}

			<div class="flex gap-2 items-center">
				<SubmitButton OnValidSubmit="HandleValidSubmit"
											class="btn btn-primary"
											disabled="@(ServiceExecutor.IsRequestLoading(nameof(CreatePost)))">
					Save
					@if (ServiceExecutor.IsRequestLoading(nameof(CreatePost)))
					{
						<span class="ml-2 loading loading-spinner loading-md"></span>
					}
				</SubmitButton>
			</div>
		</EditForm>
	</Papper>
</div>