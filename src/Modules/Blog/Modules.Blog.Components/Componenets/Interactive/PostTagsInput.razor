@code {
	[Inject]
	public IUIBus Bus { get; set; } = default!;

	[Parameter]
	public List<TagResponse> Tags { get; set; } = [];

	[Parameter]
	public EventCallback<List<TagResponse>> OnTagsChanged { get; set; }

	private Result<PagedList<TagResponse>> tagsResponse;
	private List<TagResponse> filteredTags = [];
	private string? filterTagInput;

	public async Task HandleAddTagKeyPress(KeyboardEventArgs e)
	{
		if (!(e.Code == "13" || e.Key == "Enter" || e.Key == "NumpadEnter"))
			return;

		if (string.IsNullOrEmpty(filterTagInput))
			return;

		var tag = filteredTags
			.Find(x => x.Name.Equals(filterTagInput, StringComparison.InvariantCultureIgnoreCase))
			?? new TagResponse { Name = filterTagInput };

		await AddTag(tag);
	}

	private async Task HandleTagChange(ChangeEventArgs e)
	{
		// Fetch tags on first change
		if (!tagsResponse.IsDefined || !tagsResponse.IsSuccess)
		{
			tagsResponse = await Bus.Send(new GetTags { PageSize = 100 });
		}

		filterTagInput = e.Value?.ToString();
		if (filterTagInput?.Length > 0)
		{
			filteredTags = tagsResponse.Entity.Items
				// Filter tags to include only those whose Name contains the filtered string (case-insensitive)
				.Where(tag => tag.Name.Contains(filterTagInput, StringComparison.CurrentCultureIgnoreCase))
				// Further filter tags to exclude those already present (case-insensitive)
				.Where(tag => !Tags
						.Any(existingTag => existingTag.Name.Equals(tag.Name, StringComparison.CurrentCultureIgnoreCase)))
				.ToList();
		}
		else
		{
			filteredTags = [];
		}
	}

	private async Task HandleTagChangeClick(TagResponse tag)
	{
		await AddTag(tag);
	}

	private async Task AddTag(TagResponse tag)
	{
		var addedTagExist = Tags
				.Where(x => x.Name.Equals(tag.Name, StringComparison.CurrentCultureIgnoreCase))
				.Any();

		if (addedTagExist)
			return;

		Tags.Add(tag);
		filterTagInput = null;
		filteredTags = [];

		await OnTagsChanged.InvokeAsync(Tags);
	}

	private async Task RemoveTag(TagResponse tag)
	{
		Tags = Tags
			.Where(x => x.TagId != tag.TagId)
			.ToList();

		await OnTagsChanged.InvokeAsync(Tags);
	}
}

<div class="flex flex-col gap-1">
	<div>
		<label class="form-control w-full">
			<span class="label">
				<span class="label-text">Tags</span>
			</span>
			<input type="text"
						 placeholder="Type here"
						 class="input input-bordered"
						 @bind="filterTagInput"
						 @oninput="HandleTagChange"
						 @onkeypress="HandleAddTagKeyPress" />
		</label>

		<SimpleAutoComplete TItem="TagResponse"
												Items="filteredTags"
												For="(x) => x.Name"
												OnItemClick="HandleTagChangeClick" />
	</div>
	<div class="flex flex-wrap gap-1">
		@foreach (var tag in Tags)
		{
			<div>
				<button type="button"
								@onclick="@(() => RemoveTag(tag))"
								class="btn btn-sm">
					@tag.Name
					<span class="text-error">🗙</span>
				</button>
			</div>
		}
	</div>
</div>