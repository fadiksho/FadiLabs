@code {
	[Parameter]
	public Guid PostId { get; set; }

	[Inject] public IServiceExecutor<IUIBus> ServiceExecutor { get; set; } = default!;
	[Inject] public required UpdatePostValidator UpdatePostValidator { get; set; }

	private Result<UpdatePost> getPostResult;
	private Result<UpdatePostResponse> updatePostResult;

	private MudForm form = default!;

	protected override async Task OnParametersSetAsync()
	{
		getPostResult = await ServiceExecutor
			.ExecuteAsync(nameof(GetToUpdatePost), x => x.Send(new GetToUpdatePost(PostId)), true);
	}

	private void TagsChangedHandler(List<TagResponse> tags)
	{
		getPostResult.Entity.Tags = tags;
	}

	private async Task Submit()
	{
		await form.Validate();

		if (form.IsValid)
		{
			updatePostResult = await ServiceExecutor
			.ExecuteAsync(nameof(UpdatePostResponse), x => x.Send(getPostResult.Entity));
		}
	}

	private void ClearUpdatePostResultError()
	{
		updatePostResult = default;
	}
}

<MudPaper Class="pa-4">
	<MudStack>
		<MudToolBar Dense="true" WrapContent="true" Gutters="false" Class="gap-2 pl-2 border-l-8 border-solid mud-border-primary">
			<MudText Typo="Typo.h5" Class="flex-grow-1">Edit @getPostResult.Entity?.Title</MudText>
		</MudToolBar>

		<ResultError Error="updatePostResult.Error" OnClear="ClearUpdatePostResultError" />

		@if (getPostResult.IsSuccess == true)
		{
			<MudForm Model="@getPostResult.Entity" @ref="@form" Validation="@(UpdatePostValidator.ValidateValue)" ValidationDelay="0">
				<MudStack Spacing="4">
					<MudTextField @bind-Value="getPostResult.Entity.Title"
												For="@(() => getPostResult.Entity.Title)"
												Variant="Variant.Outlined"
												Immediate="true"
												Label="Title" />

					<MudTextField @bind-Value="getPostResult.Entity.Slug"
												For="@(() => getPostResult.Entity.Slug)"
												Variant="Variant.Outlined"
												AutoGrow
												Immediate="true"
												Label="Slug" />

					<MudTextField @bind-Value="getPostResult.Entity.Description"
												For="@(() => getPostResult.Entity.Description)"
												Variant="Variant.Outlined"
												AutoGrow
												Immediate="true"
												Label="Description" />

					<MudTextField @bind-Value="getPostResult.Entity.Body"
												For="@(() => getPostResult.Entity.Body)"
												Variant="Variant.Outlined"
												AutoGrow
												Immediate="true"
												Label="Body" />

					<PostTagsInput OnTagsChanged="TagsChangedHandler" Tags="getPostResult.Entity.Tags" />

					<MudDatePicker Label="PublishedDate"
												 @bind-Date="getPostResult.Entity.PublishedDate"
												 Variant="Variant.Outlined" />

					<MudDatePicker Label="PublishedDate"
												 @bind-Date="getPostResult.Entity.UpdatedDate"
												 Variant="Variant.Outlined" />

					<MudCheckBox Label="Published" @bind-Value="getPostResult.Entity.IsPublished" Color="Color.Primary"></MudCheckBox>

					<MudButton Variant="Variant.Filled" Color="Color.Primary" Class="mr-auto" OnClick="@(async () => await Submit())">Save</MudButton>
				</MudStack>
			</MudForm>
		}
	</MudStack>
</MudPaper>
