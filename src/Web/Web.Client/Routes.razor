@using Microsoft.AspNetCore.Components.WebAssembly.Services
@using Microsoft.AspNetCore.Components.Routing
@using Microsoft.AspNetCore.Components.Authorization
@using System.Reflection

@inject LazyAssemblyLoader AssemblyLoader
@inject ILogger<Routes> Logger

<Router AppAssembly="@typeof(Shared.Components.Program).Assembly"
AdditionalAssemblies="lazyLoadedAssemblies" 
OnNavigateAsync="OnNavigateAsync"  >
	<Found Context="routeData" >
		<AuthorizeRouteView RouteData="routeData" Resource="routeData">
			<Authorizing>
				<p>Authorizing...</p>
			</Authorizing>
			<NotAuthorized>
				<Shared.Components.Components.Shared.StatusCodeRedirect Code="401" />
			</NotAuthorized>
		</AuthorizeRouteView>
		<FocusOnNavigate RouteData="routeData" Selector="h1" />
	</Found>
	<NotFound>
		<Shared.Components.Components.Shared.StatusCodeRedirect Code="404" />
	</NotFound>
	<Navigating>
		<LayoutView Layout="@typeof(Shared.Components.Components.Layout.Main.MainLayout)">
			<MudBlazor.MudProgressLinear Color="MudBlazor.Color.Primary"
											 Size="MudBlazor.Size.Small"
											 Indeterminate="true" />
		</LayoutView>
	</Navigating>
</Router>

@code {

	List<Assembly> lazyLoadedAssemblies =
	[
		typeof(Modules.Home.Components.Program).Assembly,
	];

	List<LazyLoadedModulesInfo> lazyLoadedModulesInfos =
	[
		new("labs/blog-lab", ["Modules.Blog.Components.wasm", "Markdig.wasm"]),
		new("labs/user-lab", ["Modules.User.Components.wasm"]),
		new("labs/auth0-lab", ["Modules.Auth0.Components.wasm"])
	];

	protected override void OnInitialized()
	{
		base.OnInitialized();
	}

	private async Task OnNavigateAsync(NavigationContext args)
	{
		try
		{
			var lazyLoadedModuleInfo = lazyLoadedModulesInfos.FirstOrDefault(x => args.Path.StartsWith(x.routePath, StringComparison.OrdinalIgnoreCase));
			if (RendererInfo.IsInteractive && lazyLoadedModuleInfo != null && lazyLoadedModuleInfo.IsLoaded == false)
			{
				Logger.LogInformation($"{RendererInfo.Name}: {RendererInfo.IsInteractive}");
				Logger.LogInformation(lazyLoadedModuleInfo.ToString());
				var assemblies =
					await AssemblyLoader.LoadAssembliesAsync(lazyLoadedModuleInfo.Assemblies);
				lazyLoadedAssemblies.AddRange(assemblies);
				lazyLoadedModuleInfo.IsLoaded = true;
			}
		}
		catch (Exception ex)
		{
			Logger.LogError("Error: {Message}", ex.Message);
		}
	}

	record LazyLoadedModulesInfo(string routePath, string[] Assemblies, bool IsLoaded = false)
	{
		public bool IsLoaded { get; set; } = IsLoaded;
	}
}